# image: php:8.3-cli

# variables:
#   DB_USER: root
#   DB_PASSWORD:
#   DB_HOST: mysql
#   DB_PORT: 3306
#   DB_NAME: phpunit

# services:
#   - name: mysql:8.0
#     alias: mysql
#     variables:
#       MYSQL_USER: $DB_USER
#       MYSQL_PASSWORD: $DB_PASSWORD
#       MYSQL_DATABASE: $DB_NAME
#       MYSQL_ROOT_PASSWORD: root_password

# stages: 
#   - build
#   - test

# before_script:
#   - apt-get update && apt-get install -y curl git unzip zip libzip-dev zlib1g-dev
#   - docker-php-ext-install zip pdo_mysql
#   - pecl install xdebug && docker-php-ext-enable xdebug
#   - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
#   - php -m | grep -E 'xml|mbstring'
#   - apt-get install -y lftp
#   - php bin/console doctrine:database:create --env=test
#   - php bin/console doctrine:migrations:migrate --no-interaction --env=test

# cache: 
#  paths:
#   - vendor/
#   - ~/.composer/cache

# build:
#   stage: build
#   script:
#     - echo "Build en cours..."
#     - composer install --prefer-dist --no-progress --no-suggest --no-interaction

# test:
#   stage: test
#   variables:
#     XDEBUG_MODE: coverage
#   # coverage: '/Lines:\s*(\d+(\.\d+)?%?)/'
#   script:
#     - echo "Test en cours..."
#     - composer grumphp
#   artifacts:
#     # reports:
#     #   coverage_report:
#     #     coverage_format: cobertura
#     #     path: var/log/coverage/cobertura.xml

image: php:8.3-cli

variables:
  DB_USER: runner
  DB_PASSWORD: password
  DB_HOST: mysql
  DB_PORT: 3306
  DB_NAME: phpunit

services:
  - name: mysql:8.0
    alias: mysql
    variables:
      MYSQL_USER: $DB_USER
      MYSQL_PASSWORD: $DB_PASSWORD
      MYSQL_DATABASE: $DB_NAME
      MYSQL_ROOT_PASSWORD: root

stages:
  - build
  - test

before_script:
  # Update packages and install necessary dependencies.
  - apt-get update && apt-get install -y curl git unzip zip libzip-dev zlib1g-dev default-mysql-client
  # Install PHP extensions.
  - docker-php-ext-install zip pdo pdo_mysql
  - pecl install xdebug && docker-php-ext-enable xdebug
  # Install Composer globally.
  - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

  - until mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASSWORD" -e "SELECT 1"; do
      echo "Waiting for MySQL to be ready..."
      sleep 2;
    done

  # Supprimer l'utilisateur si il existe
  - mysql -h "$DB_HOST" -u root -proot -e "DROP USER IF EXISTS '$DB_USER'@'%';"
  
  # Cr√©er un nouvel utilisateur
  - mysql -h "$DB_HOST" -u root -proot -e "CREATE USER '$DB_USER'@'%' IDENTIFIED BY '$DB_PASSWORD';"
  - mysql -h "$DB_HOST" -u root -proot -e "GRANT ALL PRIVILEGES ON *.* TO '$DB_USER'@'%';"
  - mysql -h "$DB_HOST" -u root -proot -e "FLUSH PRIVILEGES;"

  # Create the test database.
  - echo "${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?serverVersion=8.0.32&charset=utf8mb4"
  - php bin/console doctrine:database:create --env=test
  - php bin/console doctrine:migrations:migrate --no-interaction --env=test

cache:
  paths:
    - vendor/
    - ~/.composer/cache

build:
  stage: build
  script:
    # Install project dependencies using Composer.
    - composer install

test:
  stage: test
  script:
    # Run code quality checks and tests with GrumPHP.
    - composer grumphp
    # Run PHPUnit tests.
    - vendor/bin/phpunit